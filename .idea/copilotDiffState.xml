<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/grid/data/local/ImageDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/grid/data/local/ImageDao.kt" />
              <option name="originalContent" value="package com.example.grid.data.local&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;&#10;@Dao   //  Data Access Object&#10;interface ImageDao {&#10;    // 모든 이미지들을 id 내림차순(최신순)으로 가져오기&#10;    @Query(&quot;SELECT * FROM images ORDER BY id DESC&quot;)&#10;    suspend fun getAllImages(): List&lt;ImageEntity&gt;&#10;&#10;    // 이미지 1개 추가하기&#10;    @Insert&#10;    suspend fun insertImage(image: ImageEntity)&#10;}" />
              <option name="updatedContent" value="package com.example.grid.data.local&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;&#10;@Dao   //  Data Access Object&#10;interface ImageDao {&#10;    // 모든 이미지들을 id 내림차순(최신순)으로 가져오기&#10;    @Query(&quot;SELECT * FROM images ORDER BY id DESC&quot;)&#10;    suspend fun getAllImages(): List&lt;ImageEntity&gt;&#10;&#10;    // 이미지 1개 추가하기&#10;    @Insert&#10;    suspend fun insertImage(image: ImageEntity)&#10;&#10;    // 여러 id에 해당하는 레코드를 한 번에 삭제&#10;    @Query(&quot;DELETE FROM images WHERE id IN (:ids)&quot;)&#10;    suspend fun deleteByIds(ids: List&lt;Int&gt;)&#10;&#10;    // 엔티티 리스트로 삭제할 때 사용하는 편의 메서드&#10;    @Delete&#10;    suspend fun deleteImages(images: List&lt;ImageEntity&gt;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/grid/view/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/grid/view/MainActivity.kt" />
              <option name="originalContent" value="package com.example.grid.view&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.grid.view.adapter.PhotoAdapter&#10;import com.example.grid.R&#10;import com.example.grid.databinding.ActivityMainBinding&#10;import com.example.grid.ui.theme.GridTheme&#10;import android.net.Uri&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import com.example.grid.data.local.AppDatabase&#10;import com.example.grid.data.local.ImageEntity&#10;import androidx.lifecycle.lifecycleScope&#10;import kotlinx.coroutines.launch&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.app.AlertDialog&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private lateinit var binding: ActivityMainBinding           // ActivityMainBinding 클래스 선언&#10;    private val photoList =&#10;        mutableListOf&lt;ImageEntity&gt;()              // Photo 클래스 리스트 선언&#10;    private lateinit var database: AppDatabase                // AppDatabase 클래스 선언&#10;    private lateinit var photoAdapter: PhotoAdapter           // PhotoAdapter 클래스 선언&#10;    private val selectedPositions = mutableSetOf&lt;Int&gt;()&#10;    private var actionMode: ActionMode? = null&#10;&#10;    // gallery 에서 이미지를 가져오기 위한 ActivityResultLauncher 초기화&#10;    private val pickImageLauncher = registerForActivityResult(&#10;        ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let { // RoomDB에 이미지 저장&#10;            saveImageToDatabase(it)&#10;        }&#10;    }&#10;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        // DB instance 가져오기&#10;        database = AppDatabase.getDatabase(this)&#10;&#10;        // 데이터베이스 경로 확인 (디버깅용)&#10;        val dbPath = database.openHelper.readableDatabase.path&#10;        android.util.Log.d(&quot;MainActivity&quot;, &quot;Database path: $dbPath&quot;)&#10;&#10;        photoAdapter = PhotoAdapter(&#10;            photoList,&#10;            onItemLongClick = { pos -&gt; // 롱클릭은 포지션(Int)을 받습니다.&#10;                val entity = photoList.getOrNull(pos)&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Item long-clicked: ${entity?.id}&quot;&#10;                ) // 롱클릭 시 선택 모드 시작&#10;                startSelectionMode(pos)&#10;            },&#10;            onItemClick = { pos -&gt; // 클릭 콜백도 포지션을 받습니다.&#10;                val entity = photoList.getOrNull(pos)&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Item clicked: ${entity?.id}&quot;&#10;                ) // 필요 시 클릭 시 동작 추가 (예: 토글 선택)&#10;                // toggleSelection(pos)&#10;            })&#10;        android.util.Log.d(&#10;            &quot;MainActivity&quot;, &quot;PhotoAdapter created with ${photoList.size} items&quot;&#10;        )&#10;        android.util.Log.d(&#10;            &quot;MainActivity&quot;, &quot;PhotoAdapter created with ${photoList.size} items&quot;&#10;        )&#10;&#10;        binding.recyclerView.layoutManager = LinearLayoutManager(this)&#10;&#10;        // this allocating adpater is call onBindViewHolder onCreateViewHolder at the same time&#10;        binding.recyclerView.adapter = photoAdapter&#10;&#10;        // ✅ &quot;사진 추가&quot; 버튼 클릭 시 갤러리 열기&#10;        binding.fabAddPhoto.setOnClickListener {&#10;            pickImageLauncher.launch(&quot;image/*&quot;)&#10;        }&#10;&#10;        // 권한 확인 및 요청&#10;        checkPermissions()&#10;&#10;        // 앱 시작 시 데이터베이스에서 이미지 로드&#10;        loadImagesFromDatabase()&#10;&#10;        // 디버깅용: 데이터베이스 상태 확인&#10;        checkDatabaseStatus()&#10;    }&#10;&#10;    private fun startSelectionMode(position: Int) {&#10;        if (actionMode != null) return&#10;        photoAdapter.multiSelectMode = true&#10;        photoAdapter.toggleSelection(position)&#10;&#10;        actionMode = startActionMode(object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode, menu: Menu): Boolean {&#10;                mode.menuInflater.inflate(R.menu.selection_menu, menu)&#10;                return true&#10;            }&#10;&#10;            override fun onPrepareActionMode(mode: ActionMode, menu: Menu) = false&#10;&#10;            override fun onActionItemClicked(&#10;                mode: ActionMode, item: MenuItem&#10;            ): Boolean {&#10;                return when (item.itemId) {&#10;                    R.id.action_delete -&gt; {&#10;                        confirmDelete()&#10;                        true&#10;                    }&#10;&#10;                    else -&gt; false&#10;                }&#10;            }&#10;&#10;            override fun onDestroyActionMode(mode: ActionMode) {&#10;                photoAdapter.multiSelectMode = false&#10;                photoAdapter.clearSelection()&#10;                actionMode = null&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun toggleSelection(pos: Int) {&#10;        if (selectedPositions.contains(pos)) {&#10;            selectedPositions.remove(pos)&#10;        } else {&#10;            selectedPositions.add(pos)&#10;        }&#10;        photoAdapter.notifyItemChanged(pos)&#10;    }&#10;&#10;    private fun confirmDelete() {&#10;        val selectedPos = photoAdapter.getSelectedItems()&#10;        if (selectedPos.isEmpty()) {&#10;            return&#10;        }&#10;&#10;        android.app.AlertDialog.Builder(this).setTitle(&quot;삭제 확인&quot;)&#10;                .setMessage(&quot;선택한 사진을 삭제하시겠습니까?&quot;).setPositiveButton(&quot;삭제&quot;) { _, _ -&gt;&#10;                    deleteSelectedPhotos(selectedPos)&#10;                }.setNegativeButton(&quot;취소&quot;, null).show()&#10;    }&#10;&#10;    private fun deleteSelectedPhotos(selectedPositions: Set&lt;Int&gt;) {&#10;        if (selectedPositions.isEmpty()) return&#10;&#10;        // 삭제할 엔티티 ID를 먼저 수집합니다 (DB 삭제를 위해 필요)&#10;        val idsToDelete = selectedPositions&#10;            .mapNotNull { idx -&gt; photoList.getOrNull(idx)?.id }&#10;            .toList()&#10;&#10;        if (idsToDelete.isEmpty()) return&#10;&#10;        // DB 삭제를 먼저 수행한 뒤 UI를 갱신합니다.&#10;        lifecycleScope.launch {&#10;            try {&#10;                // DAO의 deleteByIds는 suspend이므로 코루틴에서 호출합니다.&#10;                database.imageDao().deleteByIds(idsToDelete)&#10;&#10;                // DB 삭제 성공 시 UI 갱신은 메인 스레드에서 수행&#10;                runOnUiThread {&#10;                    photoAdapter.removeItemsAtPositions(selectedPositions)&#10;                    android.widget.Toast.makeText(this@MainActivity, &quot;삭제되었습니다&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;MainActivity&quot;, &quot;Failed to delete items&quot;, e)&#10;                runOnUiThread {&#10;                    android.widget.Toast.makeText(this@MainActivity, &quot;삭제에 실패했습니다&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkPermissions() {&#10;        val permissions = mutableListOf&lt;String&gt;()&#10;&#10;        if (ContextCompat.checkSelfPermission(&#10;                this, Manifest.permission.READ_EXTERNAL_STORAGE&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)&#10;        }&#10;&#10;        if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.TIRAMISU) {&#10;            if (ContextCompat.checkSelfPermission(&#10;                    this, Manifest.permission.READ_MEDIA_IMAGES&#10;                ) != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                permissions.add(Manifest.permission.READ_MEDIA_IMAGES)&#10;            }&#10;        }&#10;&#10;        if (permissions.isNotEmpty()) {&#10;            ActivityCompat.requestPermissions(this, permissions.toTypedArray(), 100)&#10;        }&#10;    }&#10;&#10;    // 데이터베이스 상태 확인 함수&#10;    private fun checkDatabaseStatus() {&#10;        lifecycleScope.launch {&#10;            try {&#10;                val count = database.imageDao().getAllImages().size&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Database status: $count images found&quot;&#10;                )&#10;&#10;                if (count == 0) {&#10;                    android.util.Log.w(&#10;                        &quot;MainActivity&quot;,&#10;                        &quot;Database is empty - this might be a fresh install or data was cleared&quot;&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&#10;                    &quot;MainActivity&quot;, &quot;Error checking database status&quot;, e&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume() // 앱이 다시 활성화될 때마다 데이터 새로고침&#10;        loadImagesFromDatabase()&#10;    }&#10;&#10;&#10;    private fun loadImagesFromDatabase() {&#10;        lifecycleScope.launch { // 코루틴 시작&#10;            try {&#10;                android.util.Log.d(&quot;MainActivity&quot;, &quot;Loading images from database...&quot;)&#10;                val images = database.imageDao().getAllImages()&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Loaded ${images.size} images from database&quot;&#10;                )&#10;&#10;                // 데이터베이스가 비어있는 경우 로그&#10;                if (images.isEmpty()) {&#10;                    android.util.Log.w(&#10;                        &quot;MainActivity&quot;, &quot;Database is empty - no images found&quot;&#10;                    )&#10;                } else { // 각 이미지 정보 로그&#10;                    images.forEachIndexed { index, image -&gt;&#10;                        android.util.Log.d(&#10;                            &quot;MainActivity&quot;,&#10;                            &quot;Image $index: ${image.title} - ${image.imageUri}&quot;&#10;                        )&#10;                    }&#10;                }&#10;&#10;                photoList.clear()&#10;                photoList.addAll(images)&#10;&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Updated photoList size: ${photoList.size}&quot;&#10;                )&#10;&#10;                // UI 스레드에서 어댑터 업데이트&#10;                runOnUiThread {&#10;                    photoAdapter.notifyDataSetChanged()&#10;                    android.util.Log.d(&#10;                        &quot;MainActivity&quot;, &quot;Adapter notified of data change&quot;&#10;                    )&#10;&#10;                    // RecyclerView 강제 새로고침&#10;                    binding.recyclerView.invalidate()&#10;                    binding.recyclerView.requestLayout()&#10;                }&#10;            } catch (e: Exception) { // 에러 처리&#10;                android.util.Log.e(&quot;MainActivity&quot;, &quot;Error loading images&quot;, e)&#10;                e.printStackTrace()&#10;            }&#10;        }&#10;    }&#10;&#10;    // RoomDB에 이미지 저장하는 함수&#10;    private fun saveImageToDatabase(uri: Uri) {&#10;        lifecycleScope.launch {&#10;            try { // URI 권한 부여 (Photo Picker URI의 경우 필요)&#10;                contentResolver.takePersistableUriPermission(&#10;                    uri, android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION&#10;                )&#10;&#10;                // 이미지를 앱 내부 저장소로 복사&#10;                val copiedUri = copyImageToInternalStorage(uri)&#10;&#10;                val newImage = ImageEntity(&#10;                    title = &quot;새 이미지&quot;,&#10;                    imageUri = copiedUri?.toString() ?: uri.toString(),&#10;                    description = &quot;갤러리에서 추가된 사진&quot;&#10;                )&#10;                database.imageDao().insertImage(newImage)&#10;&#10;                // DB에 저장 후 목록 다시 로드&#10;                loadImagesFromDatabase()&#10;            } catch (e: Exception) { // 에러 처리&#10;                android.util.Log.e(&#10;                    &quot;MainActivity&quot;, &quot;Error saving image to database&quot;, e&#10;                )&#10;                e.printStackTrace()&#10;            }&#10;        }&#10;    }&#10;&#10;    // 이미지를 앱 내부 저장소로 복사하는 함수&#10;    private fun copyImageToInternalStorage(uri: Uri): Uri? {&#10;        return try {&#10;            val inputStream = contentResolver.openInputStream(uri)&#10;            val fileName = &quot;image_${System.currentTimeMillis()}.jpg&quot;&#10;            val file = java.io.File(filesDir, fileName)&#10;            val outputStream = java.io.FileOutputStream(file)&#10;&#10;            inputStream?.use { input -&gt;&#10;                outputStream.use { output -&gt;&#10;                    input.copyTo(output)&#10;                }&#10;            }&#10;&#10;            android.util.Log.d(&#10;                &quot;MainActivity&quot;, &quot;Image copied to: ${file.absolutePath}&quot;&#10;            )&#10;            Uri.fromFile(file)&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;MainActivity&quot;, &quot;Error copying image&quot;, e)&#10;            null&#10;        }&#10;    }&#10;&#10;&#10;    //        enableEdgeToEdge()&#10;    //        setContent {&#10;    //            GridTheme {&#10;    //                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;    //                    Greeting(&#10;    //                        name = &quot;Android&quot;,&#10;    //                        modifier = Modifier.padding(innerPadding)&#10;    //                    )&#10;    //                }&#10;    //            }&#10;    //        }&#10;}&#10;&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;, modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    GridTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.grid.view&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.grid.view.adapter.PhotoAdapter&#10;import com.example.grid.R&#10;import com.example.grid.databinding.ActivityMainBinding&#10;import com.example.grid.ui.theme.GridTheme&#10;import android.net.Uri&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import com.example.grid.data.local.AppDatabase&#10;import com.example.grid.data.local.ImageEntity&#10;import androidx.lifecycle.lifecycleScope&#10;import kotlinx.coroutines.launch&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.app.AlertDialog&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private lateinit var binding: ActivityMainBinding           // ActivityMainBinding 클래스 선언&#10;    private val photoList =&#10;        mutableListOf&lt;ImageEntity&gt;()              // Photo 클래스 리스트 선언&#10;    private lateinit var database: AppDatabase                // AppDatabase 클래스 선언&#10;    private lateinit var photoAdapter: PhotoAdapter           // PhotoAdapter 클래스 선언&#10;    private val selectedPositions = mutableSetOf&lt;Int&gt;()&#10;    private var actionMode: ActionMode? = null&#10;&#10;    // gallery 에서 이미지를 가져오기 위한 ActivityResultLauncher 초기화&#10;    private val pickImageLauncher = registerForActivityResult(&#10;        ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let { // RoomDB에 이미지 저장&#10;            saveImageToDatabase(it)&#10;        }&#10;    }&#10;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        // DB instance 가져오기&#10;        database = AppDatabase.getDatabase(this)&#10;&#10;        // 데이터베이스 경로 확인 (디버깅용)&#10;        val dbPath = database.openHelper.readableDatabase.path&#10;        android.util.Log.d(&quot;MainActivity&quot;, &quot;Database path: $dbPath&quot;)&#10;&#10;        photoAdapter = PhotoAdapter(&#10;            photoList,&#10;            onItemLongClick = { pos -&gt; // 롱클릭은 포지션(Int)을 받습니다.&#10;                val entity = photoList.getOrNull(pos)&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Item long-clicked: ${entity?.id}&quot;&#10;                ) // 롱클릭 시 선택 모드 시작&#10;                startSelectionMode(pos)&#10;            },&#10;            onItemClick = { pos -&gt; // 클릭 콜백도 포지션을 받습니다.&#10;                val entity = photoList.getOrNull(pos)&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Item clicked: ${entity?.id}&quot;&#10;                ) // 필요 시 클릭 시 동작 추가 (예: 토글 선택)&#10;                // toggleSelection(pos)&#10;            })&#10;        android.util.Log.d(&#10;            &quot;MainActivity&quot;, &quot;PhotoAdapter created with ${photoList.size} items&quot;&#10;        )&#10;        android.util.Log.d(&#10;            &quot;MainActivity&quot;, &quot;PhotoAdapter created with ${photoList.size} items&quot;&#10;        )&#10;&#10;        binding.recyclerView.layoutManager = LinearLayoutManager(this)&#10;&#10;        // this allocating adpater is call onBindViewHolder onCreateViewHolder at the same time&#10;        binding.recyclerView.adapter = photoAdapter&#10;&#10;        // ✅ &quot;사진 추가&quot; 버튼 클릭 시 갤러리 열기&#10;        binding.fabAddPhoto.setOnClickListener {&#10;            pickImageLauncher.launch(&quot;image/*&quot;)&#10;        }&#10;&#10;        // 권한 확인 및 요청&#10;        checkPermissions()&#10;&#10;        // 앱 시작 시 데이터베이스에서 이미지 로드&#10;        loadImagesFromDatabase()&#10;&#10;        // 디버깅용: 데이터베이스 상태 확인&#10;        checkDatabaseStatus()&#10;    }&#10;&#10;    private fun startSelectionMode(position: Int) {&#10;        if (actionMode != null) return&#10;        photoAdapter.multiSelectMode = true&#10;        photoAdapter.toggleSelection(position)&#10;&#10;        actionMode = startActionMode(object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode, menu: Menu): Boolean {&#10;                mode.menuInflater.inflate(R.menu.selection_menu, menu)&#10;                return true&#10;            }&#10;&#10;            override fun onPrepareActionMode(mode: ActionMode, menu: Menu) = false&#10;&#10;            override fun onActionItemClicked(&#10;                mode: ActionMode, item: MenuItem&#10;            ): Boolean {&#10;                return when (item.itemId) {&#10;                    R.id.action_delete -&gt; {&#10;                        confirmDelete()&#10;                        true&#10;                    }&#10;&#10;                    else -&gt; false&#10;                }&#10;            }&#10;&#10;            override fun onDestroyActionMode(mode: ActionMode) {&#10;                photoAdapter.multiSelectMode = false&#10;                photoAdapter.clearSelection()&#10;                actionMode = null&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun toggleSelection(pos: Int) {&#10;        if (selectedPositions.contains(pos)) {&#10;            selectedPositions.remove(pos)&#10;        } else {&#10;            selectedPositions.add(pos)&#10;        }&#10;        photoAdapter.notifyItemChanged(pos)&#10;    }&#10;&#10;    private fun confirmDelete() {&#10;        val selectedPos = photoAdapter.getSelectedItems()&#10;        if (selectedPos.isEmpty()) {&#10;            return&#10;        }&#10;&#10;        android.app.AlertDialog.Builder(this).setTitle(&quot;삭제 확인&quot;)&#10;                .setMessage(&quot;선택한 사진을 삭제하시겠습니까?&quot;).setPositiveButton(&quot;삭제&quot;) { _, _ -&gt;&#10;                    deleteSelectedPhotos(selectedPos)&#10;                }.setNegativeButton(&quot;취소&quot;, null).show()&#10;    }&#10;&#10;    private fun deleteSelectedPhotos(selectedPositions: Set&lt;Int&gt;) {&#10;        if (selectedPositions.isEmpty()) return&#10;&#10;        // 삭제할 엔티티 ID를 먼저 수집합니다 (DB 삭제를 위해 필요)&#10;        val idsToDelete = selectedPositions&#10;            .mapNotNull { idx -&gt; photoList.getOrNull(idx)?.id }&#10;            .toList()&#10;&#10;        if (idsToDelete.isEmpty()) return&#10;&#10;        // DB 삭제를 먼저 수행한 뒤 UI를 갱신합니다.&#10;        lifecycleScope.launch {&#10;            try {&#10;                // DAO의 deleteByIds는 suspend이므로 코루틴에서 호출합니다.&#10;                database.imageDao().deleteByIds(idsToDelete)&#10;&#10;                // DB 삭제 성공 시 UI 갱신은 메인 스레드에서 수행&#10;                runOnUiThread {&#10;                    photoAdapter.removeItemsAtPositions(selectedPositions)&#10;                    android.widget.Toast.makeText(this@MainActivity, &quot;삭제되었습니다&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;MainActivity&quot;, &quot;Failed to delete items&quot;, e)&#10;                runOnUiThread {&#10;                    android.widget.Toast.makeText(this@MainActivity, &quot;삭제에 실패했습니다&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkPermissions() {&#10;        val permissions = mutableListOf&lt;String&gt;()&#10;&#10;        if (ContextCompat.checkSelfPermission(&#10;                this, Manifest.permission.READ_EXTERNAL_STORAGE&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)&#10;        }&#10;&#10;        if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.TIRAMISU) {&#10;            if (ContextCompat.checkSelfPermission(&#10;                    this, Manifest.permission.READ_MEDIA_IMAGES&#10;                ) != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                permissions.add(Manifest.permission.READ_MEDIA_IMAGES)&#10;            }&#10;        }&#10;&#10;        if (permissions.isNotEmpty()) {&#10;            ActivityCompat.requestPermissions(this, permissions.toTypedArray(), 100)&#10;        }&#10;    }&#10;&#10;    // 데이터베이스 상태 확인 함수&#10;    private fun checkDatabaseStatus() {&#10;        lifecycleScope.launch {&#10;            try {&#10;                val count = database.imageDao().getAllImages().size&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Database status: $count images found&quot;&#10;                )&#10;&#10;                if (count == 0) {&#10;                    android.util.Log.w(&#10;                        &quot;MainActivity&quot;,&#10;                        &quot;Database is empty - this might be a fresh install or data was cleared&quot;&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&#10;                    &quot;MainActivity&quot;, &quot;Error checking database status&quot;, e&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume() // 앱이 다시 활성화될 때마다 데이터 새로고침&#10;        loadImagesFromDatabase()&#10;    }&#10;&#10;&#10;    private fun loadImagesFromDatabase() {&#10;        lifecycleScope.launch { // 코루틴 시작&#10;            try {&#10;                android.util.Log.d(&quot;MainActivity&quot;, &quot;Loading images from database...&quot;)&#10;                val images = database.imageDao().getAllImages()&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Loaded ${images.size} images from database&quot;&#10;                )&#10;&#10;                // 데이터베이스가 비어있는 경우 로그&#10;                if (images.isEmpty()) {&#10;                    android.util.Log.w(&#10;                        &quot;MainActivity&quot;, &quot;Database is empty - no images found&quot;&#10;                    )&#10;                } else { // 각 이미지 정보 로그&#10;                    images.forEachIndexed { index, image -&gt;&#10;                        android.util.Log.d(&#10;                            &quot;MainActivity&quot;,&#10;                            &quot;Image $index: ${image.title} - ${image.imageUri}&quot;&#10;                        )&#10;                    }&#10;                }&#10;&#10;                photoList.clear()&#10;                photoList.addAll(images)&#10;&#10;                android.util.Log.d(&#10;                    &quot;MainActivity&quot;, &quot;Updated photoList size: ${photoList.size}&quot;&#10;                )&#10;&#10;                // UI 스레드에서 어댑터 업데이트&#10;                runOnUiThread {&#10;                    photoAdapter.notifyDataSetChanged()&#10;                    android.util.Log.d(&#10;                        &quot;MainActivity&quot;, &quot;Adapter notified of data change&quot;&#10;                    )&#10;&#10;                    // RecyclerView 강제 새로고침&#10;                    binding.recyclerView.invalidate()&#10;                    binding.recyclerView.requestLayout()&#10;                }&#10;            } catch (e: Exception) { // 에러 처리&#10;                android.util.Log.e(&quot;MainActivity&quot;, &quot;Error loading images&quot;, e)&#10;                e.printStackTrace()&#10;            }&#10;        }&#10;    }&#10;&#10;    // RoomDB에 이미지 저장하는 함수&#10;    private fun saveImageToDatabase(uri: Uri) {&#10;        lifecycleScope.launch {&#10;            try { // URI 권한 부여 (Photo Picker URI의 경우 필요)&#10;                contentResolver.takePersistableUriPermission(&#10;                    uri, android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION&#10;                )&#10;&#10;                // 이미지를 앱 내부 저장소로 복사&#10;                val copiedUri = copyImageToInternalStorage(uri)&#10;&#10;                val newImage = ImageEntity(&#10;                    title = &quot;새 이미지&quot;,&#10;                    imageUri = copiedUri?.toString() ?: uri.toString(),&#10;                    description = &quot;갤러리에서 추가된 사진&quot;&#10;                )&#10;                database.imageDao().insertImage(newImage)&#10;&#10;                // DB에 저장 후 목록 다시 로드&#10;                loadImagesFromDatabase()&#10;            } catch (e: Exception) { // 에러 처리&#10;                android.util.Log.e(&#10;                    &quot;MainActivity&quot;, &quot;Error saving image to database&quot;, e&#10;                )&#10;                e.printStackTrace()&#10;            }&#10;        }&#10;    }&#10;&#10;    // 이미지를 앱 내부 저장소로 복사하는 함수&#10;    private fun copyImageToInternalStorage(uri: Uri): Uri? {&#10;        return try {&#10;            val inputStream = contentResolver.openInputStream(uri)&#10;            val fileName = &quot;image_${System.currentTimeMillis()}.jpg&quot;&#10;            val file = java.io.File(filesDir, fileName)&#10;            val outputStream = java.io.FileOutputStream(file)&#10;&#10;            inputStream?.use { input -&gt;&#10;                outputStream.use { output -&gt;&#10;                    input.copyTo(output)&#10;                }&#10;            }&#10;&#10;            android.util.Log.d(&#10;                &quot;MainActivity&quot;, &quot;Image copied to: ${file.absolutePath}&quot;&#10;            )&#10;            Uri.fromFile(file)&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;MainActivity&quot;, &quot;Error copying image&quot;, e)&#10;            null&#10;        }&#10;    }&#10;&#10;&#10;    //        enableEdgeToEdge()&#10;    //        setContent {&#10;    //            GridTheme {&#10;    //                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;    //                    Greeting(&#10;    //                        name = &quot;Android&quot;,&#10;    //                        modifier = Modifier.padding(innerPadding)&#10;    //                    )&#10;    //                }&#10;    //            }&#10;    //        }&#10;}&#10;&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;, modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    GridTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>